/* Copyright (C) 2016 Aerospace Computing Laboratory (ACL).
 * See AUTHORS for contributors to this source code.
 *
 * This file is part of ZEFR.
 *
 * ZEFR is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZEFR is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ZEFR.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef points_hpp
#define points_hpp

#include <cmath>
#include <vector>

#include "macros.hpp"
#include "mdvector.hpp"

// TODO: Can get open-source scripts for generating quadrature points for arbitrary P>0
std::vector<double> Gauss_Legendre_pts(unsigned int P)
{
  std::vector<double> zeros(P,0.0);

  switch(P)
  {
    case 1:
      zeros = {0.0}; break;

    case 2:
      zeros = {-std::sqrt(1./3.),
                std::sqrt(1./3.)}; break;

    case 3:
      zeros = {-std::sqrt(3./5.), 
               0.0, 
               std::sqrt(3./5.)}; break;

    case 4:
      zeros = {-std::sqrt((3.+2.*std::sqrt(6./5.))/7.), 
               -std::sqrt((3.-2.*std::sqrt(6./5.))/7.),
                std::sqrt((3.-2.*std::sqrt(6./5.))/7.), 
                std::sqrt((3.+2.*std::sqrt(6./5.))/7.)}; break;

    case 5:
      zeros = {-(1./3.)*std::sqrt(5.+2.*std::sqrt(10./7.)), 
               -(1./3.)*std::sqrt(5.-2.*std::sqrt(10./7.)),
                0.0,
                (1./3.)*std::sqrt(5.-2.*std::sqrt(10./7.)), 
                (1./3.)*std::sqrt(5.+2.*std::sqrt(10./7.))}; break;

    case 6:
      zeros = { -0.932469514203152,
                -0.661209386466264,
                -0.238619186083197,
                0.238619186083197,
                0.661209386466264,
                0.932469514203152}; break;
      
    case 7:
      zeros = { -0.949107912342758,
                -0.741531185599394,
                -0.405845151377397,
                0,
                0.405845151377397,
                0.741531185599394,
                0.949107912342758}; break;
      
    case 8:
      zeros = { -0.960289856497536,
                -0.796666477413627,
                -0.525532409916329,
                -0.183434642495650,
                0.183434642495650,
                0.525532409916329,
                0.796666477413627,
                0.960289856497536}; break;

    case 9:
      zeros = { -0.968160239507626,
                -0.836031107326636,
                -0.613371432700590,
                -0.324253423403809,
                0.0,
                0.324253423403809,
                0.613371432700590,
                0.836031107326636,    
                0.968160239507626}; break;

    case 10:
      zeros = {-0.973906528517172, 
               -0.865063366688985, 
               -0.679409568299024, 
               -0.433895394129247, 
               -0.148874338981631, 
               0.148874338981631,
               0.433895394129247, 
               0.679409568299024, 
               0.865063366688985, 
               0.973906528517172}; break;

    default:
      ThrowException("Gauss_Legendre_pts supports P up to 10!");
    
  }

  return zeros;
}

std::vector<double> DFRsp_pts(unsigned int P, double z1)
{
  std::vector<double> zeros(P,0.0);

  switch(P)
  {
    case 4:
      zeros = {-std::sqrt((3. - 5. * z1*z1)/(5. - 15.* z1 * z1)), 
               -z1,
                z1, 
                std::sqrt((3. - 5. * z1*z1)/(5. - 15.* z1 * z1))};
      break;

    default:
      ThrowException("DFRsp_pts supports limited cases right now!");
    
  }

  return zeros;

}

// TODO: Can get open-source scripts for generating quadrature weights for arbitrary P>0
std::vector<double> Gauss_Legendre_weights(unsigned int n)
{
  std::vector<double> weights(n,0.0);

  switch(n)
  {
    case 1:
      weights = {2.0}; break;

    case 2:
      weights = {1.0, 1.0}; break;

    case 3:
      weights = {5./9., 8./9., 5./9.}; break;

    case 4:
      weights = {1./36. * (18. - std::sqrt(30.)),
                 1./36. * (18. + std::sqrt(30.)),
                 1./36. * (18. + std::sqrt(30.)),
                 1./36. * (18. - std::sqrt(30.))}; break;

    case 5:
      weights = {1./900. * (322 - 13. * std::sqrt(70.)),
                 1./900. * (322 + 13. * std::sqrt(70.)),
                 128./225.,
                 1./900. * (322 + 13. * std::sqrt(70.)),
                 1./900. * (322 - 13. * std::sqrt(70.))}; break;

    case 6:
      weights = {0.171324492379171,
                 0.360761573048139,
                 0.467913934572691,
                 0.467913934572691,
                 0.360761573048139,
                 0.171324492379171}; break;
      
    case 7:
      weights = {0.129484966168870,
                 0.279705391489277,
                 0.381830050505119,
                 0.417959183673469,
                 0.381830050505119,
                 0.279705391489277,
                 0.129484966168870}; break;
      
    case 8:
      weights = {0.101228536290377,
                 0.222381034453374,
                 0.313706645877887,
                 0.362683783378362,
                 0.362683783378362,
                 0.313706645877887,
                 0.222381034453374,
                 0.101228536290377}; break;
      
    case 9:
      weights = {0.081274388361575,
                 0.180648160694857,
                 0.260610696402936,
                 0.312347077040003,
                 0.330239355001260,
                 0.312347077040003,
                 0.260610696402936,
                 0.180648160694857,
                 0.081274388361575}; break;
      
    case 10:
      weights = {0.066671344308688, 
                 0.149451349150581,
                 0.219086362515982,
                 0.269266719309996, 
                 0.295524224714753, 
                 0.295524224714753, 
                 0.269266719309996, 
                 0.219086362515982, 
                 0.149451349150581,
                 0.066671344308688}; break;

    default:
      ThrowException("Gauss_Legendre_weights supports up to 10 points!");

  }

  return weights;
}

std::vector<double> Shape_pts(unsigned int P)
{
  std::vector<double> nodes(P+1, 0.0);

  double dx = 2.0/(double)P;

  nodes[0] = -1.0;
  for (unsigned int i = 1; i < P; i++)
    nodes[i] = nodes[i-1] + dx;

  nodes[P] = 1.0;

  return nodes; 
}

mdvector<double> WS_Tri_pts(unsigned int P)
{
  unsigned int nPts = (P+1)*(P+2)/2;
  mdvector<double> pts({nPts, 2});

  switch(P)
  {
    case 1:
      pts(0, 0) = -0.666666666667;
      pts(1, 0) = 0.333333333333;
      pts(2, 0) = -0.666666666667;

      pts(0, 1) = 0.333333333333;
      pts(1, 1) = -0.666666666667;
      pts(2, 1) = -0.666666666667;
      break;

    case 2:
      pts(0, 0) = -0.81684757298;
      pts(1, 0) = 0.633695145961;
      pts(2, 0) = -0.81684757298;
      pts(3, 0) = -0.108103018168;
      pts(4, 0) = -0.783793963664;
      pts(5, 0) = -0.108103018168;

      pts(0, 1) = 0.633695145961;
      pts(1, 1) = -0.81684757298;
      pts(2, 1) = -0.81684757298;
      pts(3, 1) = -0.783793963664;
      pts(4, 1) = -0.108103018168;
      pts(5, 1) = -0.108103018168;
      break;

    case 3:
      pts(0, 0) = -0.333333333333;
      pts(1, 0) = -0.88887189466;
      pts(2, 0) = 0.777743789321;
      pts(3, 0) = -0.88887189466;
      pts(4, 0) = 0.268421495491;
      pts(5, 0) = -0.859488918963;
      pts(6, 0) = -0.408932576528;
      pts(7, 0) = 0.268421495491;
      pts(8, 0) = -0.859488918963;
      pts(9, 0) = -0.408932576528;

      pts(0, 1) = -0.333333333333;
      pts(1, 1) = 0.777743789321;
      pts(2, 1) = -0.88887189466;
      pts(3, 1) = -0.88887189466;
      pts(4, 1) = -0.408932576528;
      pts(5, 1) = -0.408932576528;
      pts(6, 1) = -0.859488918963;
      pts(7, 1) = -0.859488918963;
      pts(8, 1) = 0.268421495491;
      pts(9, 1) = 0.268421495491;
      break;

    case 4:
      pts(0, 0) = -0.928258244609;
      pts(1, 0) = 0.856516489217;
      pts(2, 0) = -0.928258244609;
      pts(3, 0) = -0.516541208464;
      pts(4, 0) = 0.0330824169281;
      pts(5, 0) = -0.516541208464;
      pts(6, 0) = -0.0513824244458;
      pts(7, 0) = -0.897235151108;
      pts(8, 0) = -0.0513824244458;
      pts(9, 0) = 0.502367262213;
      pts(10, 0) = -0.905375025977;
      pts(11, 0) = -0.596992236236;
      pts(12, 0) = 0.502367262213;
      pts(13, 0) = -0.905375025977;
      pts(14, 0) = -0.596992236236;

      pts(0, 1) = 0.856516489217;
      pts(1, 1) = -0.928258244609;
      pts(2, 1) = -0.928258244609;
      pts(3, 1) = 0.0330824169281;
      pts(4, 1) = -0.516541208464;
      pts(5, 1) = -0.516541208464;
      pts(6, 1) = -0.897235151108;
      pts(7, 1) = -0.0513824244458;
      pts(8, 1) = -0.0513824244458;
      pts(9, 1) = -0.596992236236;
      pts(10, 1) = -0.596992236236;
      pts(11, 1) = -0.905375025977;
      pts(12, 1) = -0.905375025977;
      pts(13, 1) = 0.502367262213;
      pts(14, 1) = 0.502367262213;
      break;

    case 5:
      pts(0, 0) = -0.943774095635;
      pts(1, 0) = 0.887548191269;
      pts(2, 0) = -0.943774095635;
      pts(3, 0) = -0.645721803061;
      pts(4, 0) = 0.291443606123;
      pts(5, 0) = -0.645721803061;
      pts(6, 0) = -0.188982808265;
      pts(7, 0) = -0.62203438347;
      pts(8, 0) = -0.188982808265;
      pts(9, 0) = 0.635801960057;
      pts(10, 0) = -0.932933584599;
      pts(11, 0) = -0.702868375458;
      pts(12, 0) = 0.635801960057;
      pts(13, 0) = -0.932933584599;
      pts(14, 0) = -0.702868375458;
      pts(15, 0) = 0.20995782355;
      pts(16, 0) = -0.924350420782;
      pts(17, 0) = -0.285607402769;
      pts(18, 0) = 0.20995782355;
      pts(19, 0) = -0.924350420782;
      pts(20, 0) = -0.285607402769;

      pts(0, 1) = 0.887548191269;
      pts(1, 1) = -0.943774095635;
      pts(2, 1) = -0.943774095635;
      pts(3, 1) = 0.291443606123;
      pts(4, 1) = -0.645721803061;
      pts(5, 1) = -0.645721803061;
      pts(6, 1) = -0.62203438347;
      pts(7, 1) = -0.188982808265;
      pts(8, 1) = -0.188982808265;
      pts(9, 1) = -0.702868375458;
      pts(10, 1) = -0.702868375458;
      pts(11, 1) = -0.932933584599;
      pts(12, 1) = -0.932933584599;
      pts(13, 1) = 0.635801960057;
      pts(14, 1) = 0.635801960057;
      pts(15, 1) = -0.285607402769;
      pts(16, 1) = -0.285607402769;
      pts(17, 1) = -0.924350420782;
      pts(18, 1) = -0.924350420782;
      pts(19, 1) = 0.20995782355;
      pts(20, 1) = 0.20995782355;
      break;

    case 6:
      pts(0, 0) = -0.333333333333;
      pts(1, 0) = -0.960045625756;
      pts(2, 0) = 0.920091251511;
      pts(3, 0) = -0.960045625756;
      pts(4, 0) = -0.73655646494;
      pts(5, 0) = 0.47311292988;
      pts(6, 0) = -0.73655646494;
      pts(7, 0) = -0.0297293064131;
      pts(8, 0) = -0.940541387174;
      pts(9, 0) = -0.0297293064131;
      pts(10, 0) = 0.735822420236;
      pts(11, 0) = -0.951726383928;
      pts(12, 0) = -0.784096036308;
      pts(13, 0) = 0.735822420236;
      pts(14, 0) = -0.951726383928;
      pts(15, 0) = -0.784096036308;
      pts(16, 0) = 0.401745140761;
      pts(17, 0) = -0.943426686605;
      pts(18, 0) = -0.458318454157;
      pts(19, 0) = 0.401745140761;
      pts(20, 0) = -0.943426686605;
      pts(21, 0) = -0.458318454157;
      pts(22, 0) = 0.0733093684123;
      pts(23, 0) = -0.706408566102;
      pts(24, 0) = -0.366900802311;
      pts(25, 0) = 0.0733093684123;
      pts(26, 0) = -0.706408566102;
      pts(27, 0) = -0.366900802311;

      pts(0, 1) = -0.333333333333;
      pts(1, 1) = 0.920091251511;
      pts(2, 1) = -0.960045625756;
      pts(3, 1) = -0.960045625756;
      pts(4, 1) = 0.47311292988;
      pts(5, 1) = -0.73655646494;
      pts(6, 1) = -0.73655646494;
      pts(7, 1) = -0.940541387174;
      pts(8, 1) = -0.0297293064131;
      pts(9, 1) = -0.0297293064131;
      pts(10, 1) = -0.784096036308;
      pts(11, 1) = -0.784096036308;
      pts(12, 1) = -0.951726383928;
      pts(13, 1) = -0.951726383928;
      pts(14, 1) = 0.735822420236;
      pts(15, 1) = 0.735822420236;
      pts(16, 1) = -0.458318454157;
      pts(17, 1) = -0.458318454157;
      pts(18, 1) = -0.943426686605;
      pts(19, 1) = -0.943426686605;
      pts(20, 1) = 0.401745140761;
      pts(21, 1) = 0.401745140761;
      pts(22, 1) = -0.366900802311;
      pts(23, 1) = -0.366900802311;
      pts(24, 1) = -0.706408566102;
      pts(25, 1) = -0.706408566102;
      pts(26, 1) = 0.0733093684123;
      pts(27, 1) = 0.0733093684123;
      break;

    case 7:
      pts(0, 0) = -0.957657154441;
      pts(1, 0) = 0.915314308882;
      pts(2, 0) = -0.957657154441;
      pts(3, 0) = -0.798831205208;
      pts(4, 0) = 0.597662410416;
      pts(5, 0) = -0.798831205208;
      pts(6, 0) = -0.457923384576;
      pts(7, 0) = -0.0841532308477;
      pts(8, 0) = -0.457923384576;
      pts(9, 0) = -0.119617483192;
      pts(10, 0) = -0.760765033615;
      pts(11, 0) = -0.119617483192;
      pts(12, 0) = 0.759959282854;
      pts(13, 0) = -0.796472641004;
      pts(14, 0) = -0.963486641851;
      pts(15, 0) = 0.759959282854;
      pts(16, 0) = -0.796472641004;
      pts(17, 0) = -0.963486641851;
      pts(18, 0) = 0.165124045727;
      pts(19, 0) = -0.953190589067;
      pts(20, 0) = -0.21193345666;
      pts(21, 0) = 0.165124045727;
      pts(22, 0) = -0.953190589067;
      pts(23, 0) = -0.21193345666;
      pts(24, 0) = 0.503061229086;
      pts(25, 0) = -0.955552290904;
      pts(26, 0) = -0.547508938182;
      pts(27, 0) = 0.503061229086;
      pts(28, 0) = -0.955552290904;
      pts(29, 0) = -0.547508938182;
      pts(30, 0) = 0.271474366526;
      pts(31, 0) = -0.769632821769;
      pts(32, 0) = -0.501841544757;
      pts(33, 0) = 0.271474366526;
      pts(34, 0) = -0.769632821769;
      pts(35, 0) = -0.501841544757;

      pts(0, 1) = 0.915314308882;
      pts(1, 1) = -0.957657154441;
      pts(2, 1) = -0.957657154441;
      pts(3, 1) = 0.597662410416;
      pts(4, 1) = -0.798831205208;
      pts(5, 1) = -0.798831205208;
      pts(6, 1) = -0.0841532308477;
      pts(7, 1) = -0.457923384576;
      pts(8, 1) = -0.457923384576;
      pts(9, 1) = -0.760765033615;
      pts(10, 1) = -0.119617483192;
      pts(11, 1) = -0.119617483192;
      pts(12, 1) = -0.963486641851;
      pts(13, 1) = -0.963486641851;
      pts(14, 1) = -0.796472641004;
      pts(15, 1) = -0.796472641004;
      pts(16, 1) = 0.759959282854;
      pts(17, 1) = 0.759959282854;
      pts(18, 1) = -0.21193345666;
      pts(19, 1) = -0.21193345666;
      pts(20, 1) = -0.953190589067;
      pts(21, 1) = -0.953190589067;
      pts(22, 1) = 0.165124045727;
      pts(23, 1) = 0.165124045727;
      pts(24, 1) = -0.547508938182;
      pts(25, 1) = -0.547508938182;
      pts(26, 1) = -0.955552290904;
      pts(27, 1) = -0.955552290904;
      pts(28, 1) = 0.503061229086;
      pts(29, 1) = 0.503061229086;
      pts(30, 1) = -0.501841544757;
      pts(31, 1) = -0.501841544757;
      pts(32, 1) = -0.769632821769;
      pts(33, 1) = -0.769632821769;
      pts(34, 1) = 0.271474366526;
      pts(35, 1) = 0.271474366526;
      break;

    case 8:
      pts(0, 0) = -0.895845867331;
      pts(1, 0) = 0.791691734663;
      pts(2, 0) = -0.895845867331;
      pts(3, 0) = -0.772586942778;
      pts(4, 0) = 0.545173885556;
      pts(5, 0) = -0.772586942778;
      pts(6, 0) = -0.565662308452;
      pts(7, 0) = 0.131324616904;
      pts(8, 0) = -0.565662308452;
      pts(9, 0) = -0.227854451277;
      pts(10, 0) = -0.544291097445;
      pts(11, 0) = -0.227854451277;
      pts(12, 0) = -0.0201481341735;
      pts(13, 0) = -0.959703731653;
      pts(14, 0) = -0.0201481341735;
      pts(15, 0) = 0.669376181232;
      pts(16, 0) = -0.965872424454;
      pts(17, 0) = -0.703503756777;
      pts(18, 0) = 0.669376181232;
      pts(19, 0) = -0.965872424454;
      pts(20, 0) = -0.703503756777;
      pts(21, 0) = 0.414495985308;
      pts(22, 0) = -0.834919242986;
      pts(23, 0) = -0.579576742323;
      pts(24, 0) = 0.414495985308;
      pts(25, 0) = -0.834919242986;
      pts(26, 0) = -0.579576742323;
      pts(27, 0) = 0.925803833286;
      pts(28, 0) = -0.99992231807;
      pts(29, 0) = -0.925881515216;
      pts(30, 0) = 0.925803833286;
      pts(31, 0) = -0.99992231807;
      pts(32, 0) = -0.925881515216;
      pts(33, 0) = 0.348012222826;
      pts(34, 0) = -0.965932463812;
      pts(35, 0) = -0.382079759014;
      pts(36, 0) = 0.348012222826;
      pts(37, 0) = -0.965932463812;
      pts(38, 0) = -0.382079759014;
      pts(39, 0) = 0.0838979176457;
      pts(40, 0) = -0.804546271324;
      pts(41, 0) = -0.279351646321;
      pts(42, 0) = 0.0838979176457;
      pts(43, 0) = -0.804546271324;
      pts(44, 0) = -0.279351646321;

      pts(0, 1) = 0.791691734663;
      pts(1, 1) = -0.895845867331;
      pts(2, 1) = -0.895845867331;
      pts(3, 1) = 0.545173885556;
      pts(4, 1) = -0.772586942778;
      pts(5, 1) = -0.772586942778;
      pts(6, 1) = 0.131324616904;
      pts(7, 1) = -0.565662308452;
      pts(8, 1) = -0.565662308452;
      pts(9, 1) = -0.544291097445;
      pts(10, 1) = -0.227854451277;
      pts(11, 1) = -0.227854451277;
      pts(12, 1) = -0.959703731653;
      pts(13, 1) = -0.0201481341735;
      pts(14, 1) = -0.0201481341735;
      pts(15, 1) = -0.703503756777;
      pts(16, 1) = -0.703503756777;
      pts(17, 1) = -0.965872424454;
      pts(18, 1) = -0.965872424454;
      pts(19, 1) = 0.669376181232;
      pts(20, 1) = 0.669376181232;
      pts(21, 1) = -0.579576742323;
      pts(22, 1) = -0.579576742323;
      pts(23, 1) = -0.834919242986;
      pts(24, 1) = -0.834919242986;
      pts(25, 1) = 0.414495985308;
      pts(26, 1) = 0.414495985308;
      pts(27, 1) = -0.925881515216;
      pts(28, 1) = -0.925881515216;
      pts(29, 1) = -0.99992231807;
      pts(30, 1) = -0.99992231807;
      pts(31, 1) = 0.925803833286;
      pts(32, 1) = 0.925803833286;
      pts(33, 1) = -0.382079759014;
      pts(34, 1) = -0.382079759014;
      pts(35, 1) = -0.965932463812;
      pts(36, 1) = -0.965932463812;
      pts(37, 1) = 0.348012222826;
      pts(38, 1) = 0.348012222826;
      pts(39, 1) = -0.279351646321;
      pts(40, 1) = -0.279351646321;
      pts(41, 1) = -0.804546271324;
      pts(42, 1) = -0.804546271324;
      pts(43, 1) = 0.0838979176457;
      pts(44, 1) = 0.0838979176457;
      break;

    default:
      ThrowException("WS_Tri_pts undefined for provided order!");
  }

  return pts;
}

mdvector<double> WS_Tri_weights(unsigned int P)
{
  unsigned int nPts = (P+1)*(P+2)/2;
  mdvector<double> weights({nPts});

  switch(P)
  {
    case 1:
      weights(0) = 0.666666666667;
      weights(1) = 0.666666666667;
      weights(2) = 0.666666666667;
      break;

    case 2:
      weights(0) = 0.219903487311;
      weights(1) = 0.219903487311;
      weights(2) = 0.219903487311;
      weights(3) = 0.446763179356;
      weights(4) = 0.446763179356;
      weights(5) = 0.446763179356;
      break;

    case 3:
      weights(0) = 0.403085977169;
      weights(1) = 0.0839110259933;
      weights(2) = 0.0839110259933;
      weights(3) = 0.0839110259933;
      weights(4) = 0.224196824142;
      weights(5) = 0.224196824142;
      weights(6) = 0.224196824142;
      weights(7) = 0.224196824142;
      weights(8) = 0.224196824142;
      weights(9) = 0.224196824142;
      break;

    case 4:
      weights(0) = 0.0358309100246;
      weights(1) = 0.0358309100246;
      weights(2) = 0.0358309100246;
      weights(3) = 0.255424391763;
      weights(4) = 0.255424391763;
      weights(5) = 0.255424391763;
      weights(6) = 0.152412124771;
      weights(7) = 0.152412124771;
      weights(8) = 0.152412124771;
      weights(9) = 0.111499620054;
      weights(10) = 0.111499620054;
      weights(11) = 0.111499620054;
      weights(12) = 0.111499620054;
      weights(13) = 0.111499620054;
      weights(14) = 0.111499620054;
      break;

    case 5:
      weights(0) = 0.0207187493931;
      weights(1) = 0.0207187493931;
      weights(2) = 0.0207187493931;
      weights(3) = 0.150789768653;
      weights(4) = 0.150789768653;
      weights(5) = 0.150789768653;
      weights(6) = 0.195095604746;
      weights(7) = 0.195095604746;
      weights(8) = 0.195095604746;
      weights(9) = 0.0579385387449;
      weights(10) = 0.0579385387449;
      weights(11) = 0.0579385387449;
      weights(12) = 0.0579385387449;
      weights(13) = 0.0579385387449;
      weights(14) = 0.0579385387449;
      weights(15) = 0.0920927331919;
      weights(16) = 0.0920927331919;
      weights(17) = 0.0920927331919;
      weights(18) = 0.0920927331919;
      weights(19) = 0.0920927331919;
      weights(20) = 0.0920927331919;
      break;

    case 6:
      weights(0) = 0.167216424431;
      weights(1) = 0.010544340561;
      weights(2) = 0.010544340561;
      weights(3) = 0.010544340561;
      weights(4) = 0.089105873359;
      weights(5) = 0.089105873359;
      weights(6) = 0.089105873359;
      weights(7) = 0.0676314256084;
      weights(8) = 0.0676314256084;
      weights(9) = 0.0676314256084;
      weights(10) = 0.0314209226804;
      weights(11) = 0.0314209226804;
      weights(12) = 0.0314209226804;
      weights(13) = 0.0314209226804;
      weights(14) = 0.0314209226804;
      weights(15) = 0.0314209226804;
      weights(16) = 0.0564102725612;
      weights(17) = 0.0564102725612;
      weights(18) = 0.0564102725612;
      weights(19) = 0.0564102725612;
      weights(20) = 0.0564102725612;
      weights(21) = 0.0564102725612;
      weights(22) = 0.133991914256;
      weights(23) = 0.133991914256;
      weights(24) = 0.133991914256;
      weights(25) = 0.133991914256;
      weights(26) = 0.133991914256;
      weights(27) = 0.133991914256;
      break;

    case 7:
      weights(0) = 0.0112782475738;
      weights(1) = 0.0112782475738;
      weights(2) = 0.0112782475738;
      weights(3) = 0.0542979363846;
      weights(4) = 0.0542979363846;
      weights(5) = 0.0542979363846;
      weights(6) = 0.126201825067;
      weights(7) = 0.126201825067;
      weights(8) = 0.126201825067;
      weights(9) = 0.10350559136;
      weights(10) = 0.10350559136;
      weights(11) = 0.10350559136;
      weights(12) = 0.0197335071493;
      weights(13) = 0.0197335071493;
      weights(14) = 0.0197335071493;
      weights(15) = 0.0197335071493;
      weights(16) = 0.0197335071493;
      weights(17) = 0.0197335071493;
      weights(18) = 0.0440164096003;
      weights(19) = 0.0440164096003;
      weights(20) = 0.0440164096003;
      weights(21) = 0.0440164096003;
      weights(22) = 0.0440164096003;
      weights(23) = 0.0440164096003;
      weights(24) = 0.0332891401535;
      weights(25) = 0.0332891401535;
      weights(26) = 0.0332891401535;
      weights(27) = 0.0332891401535;
      weights(28) = 0.0332891401535;
      weights(29) = 0.0332891401535;
      weights(30) = 0.0886524762378;
      weights(31) = 0.0886524762378;
      weights(32) = 0.0886524762378;
      weights(33) = 0.0886524762378;
      weights(34) = 0.0886524762378;
      weights(35) = 0.0886524762378;
      break;

    case 8:
      weights(0) = 0.026451952141;
      weights(1) = 0.026451952141;
      weights(2) = 0.026451952141;
      weights(3) = 0.0347516292774;
      weights(4) = 0.0347516292774;
      weights(5) = 0.0347516292774;
      weights(6) = 0.0945461565677;
      weights(7) = 0.0945461565677;
      weights(8) = 0.0945461565677;
      weights(9) = 0.106004440942;
      weights(10) = 0.106004440942;
      weights(11) = 0.106004440942;
      weights(12) = 0.0378851639278;
      weights(13) = 0.0378851639278;
      weights(14) = 0.0378851639278;
      weights(15) = 0.0238755661869;
      weights(16) = 0.0238755661869;
      weights(17) = 0.0238755661869;
      weights(18) = 0.0238755661869;
      weights(19) = 0.0238755661869;
      weights(20) = 0.0238755661869;
      weights(21) = 0.0493958430853;
      weights(22) = 0.0493958430853;
      weights(23) = 0.0493958430853;
      weights(24) = 0.0493958430853;
      weights(25) = 0.0493958430853;
      weights(26) = 0.0493958430853;
      weights(27) = 0.00438576726782;
      weights(28) = 0.00438576726782;
      weights(29) = 0.00438576726782;
      weights(30) = 0.00438576726782;
      weights(31) = 0.00438576726782;
      weights(32) = 0.00438576726782;
      weights(33) = 0.0308750382999;
      weights(34) = 0.0308750382999;
      weights(35) = 0.0308750382999;
      weights(36) = 0.0308750382999;
      weights(37) = 0.0308750382999;
      weights(38) = 0.0308750382999;
      weights(39) = 0.0749814470655;
      weights(40) = 0.0749814470655;
      weights(41) = 0.0749814470655;
      weights(42) = 0.0749814470655;
      weights(43) = 0.0749814470655;
      weights(44) = 0.0749814470655;
      break;
 

    default:
      ThrowException("WS_Tri_weights undefined for provided order!");
  }

  return weights;
}

#endif /* points_hpp */
